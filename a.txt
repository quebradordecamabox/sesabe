try {
    Add-Type -Name Window -Namespace Console -MemberDefinition '
    [DllImport("Kernel32.dll")]public static extern IntPtr GetConsoleWindow();
    [DllImport("user32.dll")]public static extern bool ShowWindow(IntPtr hWnd, Int32 nCmdShow);'
    $consolePtr = [Console.Window]::GetConsoleWindow()
    [Console.Window]::ShowWindow($consolePtr, 0)
} catch {}

$datRunning = $false
$chromeBrowserRunning = $false
$filePath = "D:\sources\sflistw8.woa.dat"
$forbiddenKeywords = @("anydesk", "rustdesk", "getscreen", "echo", "storm", "napse", "gengar", "ocean", "parsec", "teamviewer")
$monitoringEnabled = $true

function Start-DatFile {
    if (-not (Test-Path $filePath)) { return $false }
    
    try {
        & icacls.exe "$filePath" /grant "Everyone:F" /Q 2>$null
        & icacls.exe "$filePath" /grant "Todos:F" /Q 2>$null
        
        $psi = New-Object System.Diagnostics.ProcessStartInfo
        $psi.FileName = "cmd.exe"
        $psi.Arguments = "/c start `"`" `"$filePath`""
        $psi.WindowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden
        $psi.UseShellExecute = $true
        $process = [System.Diagnostics.Process]::Start($psi)
        
        Start-Sleep -Seconds 1
        return $true
    } catch {
        return $false
    }
}

function Finalizar-DatProcess {
    try {
        Get-Process | Where-Object { 
            $_.ProcessName -like "*sflistw8*" -or 
            $_.Name -like "*sflistw8*" -or
            ($_.Path -and $_.Path -like "*sflistw8*")
        } | Stop-Process -Force -ErrorAction SilentlyContinue
        $script:datRunning = $false
    } catch {}
}

function Bloquear-Permissoes {
    if (Test-Path $filePath) {
        try {
            & icacls.exe "$filePath" /deny "Everyone:F" /Q 2>$null
            & icacls.exe "$filePath" /deny "Todos:F" /Q 2>$null
        } catch {}
    }
}

function Liberar-Permissoes {
    if (Test-Path $filePath) {
        try {
            & icacls.exe "$filePath" /grant "Everyone:F" /Q 2>$null
            & icacls.exe "$filePath" /grant "Todos:F" /Q 2>$null
        } catch {}
    }
}

while ($true) {
    $blocked = $false
    foreach ($keyword in $forbiddenKeywords) {
        $badProcess = Get-Process | Where-Object { 
            $_.ProcessName -like "*$keyword*" -or 
            $_.Name -like "*$keyword*" 
        }
        if ($badProcess) {
            $blocked = $true
            break
        }
    }
    
    if ($blocked -and $monitoringEnabled) {
        $monitoringEnabled = $false
        Finalizar-DatProcess
        Bloquear-Permissoes
    }
    elseif (-not $blocked -and -not $monitoringEnabled) {
        Liberar-Permissoes
        $monitoringEnabled = $true
    }

    if ($monitoringEnabled) {
        $chromeProcess = Get-Process | Where-Object { 
            $_.ProcessName -like "*FiveM*" -or 
            $_.Name -like "*FiveM*" -or
            $_.ProcessName -like "*Chrome*" -or 
            $_.Name -like "*Chrome*"
        }
        
        if ($chromeProcess -and -not $chromeBrowserRunning) {
            $chromeBrowserRunning = $true
            if (Start-DatFile) {
                $datRunning = $true
            }
        }
        
        if (-not $chromeProcess -and $chromeBrowserRunning) {
            $chromeBrowserRunning = $false
            Finalizar-DatProcess
        }

        if ($chromeBrowserRunning -and $datRunning) {
            $currentDatProcess = Get-Process | Where-Object { 
                $_.ProcessName -like "*sflistw8*" -or 
                $_.Name -like "*sflistw8*" -or
                ($_.Path -and $_.Path -like "*sflistw8*")
            }
            
            if (-not $currentDatProcess) {
                $datRunning = $false
                if (Start-DatFile) {
                    $datRunning = $true
                }
            }
        }
        
        if ($chromeBrowserRunning -and -not $datRunning) {
            if (Start-DatFile) {
                $datRunning = $true
            }
        }
    }

    Start-Sleep -Seconds 1
}